+ (1|Date) + (1|Site), # random effects
data = dframe1)
summary(model2NB)
drop1(model2NB, test= "Chisq") # glmer.nb produces the same model class as glmer so we can treat it the same
model2NB <- glmer.nb(PollenTypes ~ Treatment # fixed effects
+ (1|Date) + (1|Site), # random effects
data = dframe1)
summary(model2NB)
drop1(model2NB, test= "Chisq") # glmer.nb produces the same model class as glmer so we can treat it the same
chkres(model2NB) # these are still not ideal but they're the best yet
j <- c("lme4","car","ggplot2","RVAideMemoire","arm","MASS","MuMIn")
new.packages <- j[!(j %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(MuMIn)
lapply(j, require, character.only = TRUE)
j <- c("lme4","car","ggplot2","RVAideMemoire","arm","MASS","MuMIn","plyr")
new.packages <- j[!(j %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(j, require, character.only = TRUE)
r.squaredGLMM(model1P,model1Q,model1NB)
r.squaredGLMM(model1P)
for (model in c(model1P,model1Q,model1NB)){
r.squaredGLMM(model)
}
r.squaredGLMM(model1P)
lapply(j, require, character.only = TRUE)  # loads up any libraries that aren't already loaded
for (model in c(model1P,model1Q,model1NB)){
r.squaredGLMM(model)
}
model1NB <- glmer.nb(PollenLoad ~ Treatment # fixed effects
+ (1|Date) + (1|Site), # random effects
data = dframe1)
summary(model1NB)
drop1(model1NB, test= "Chisq") # glmer.nb produces the same model class as glmer so we can treat it the same
chkres(model1NB) # these are still not ideal but they're the best yet
model1P <- glmer(PollenLoad ~ Treatment # fixed effects
+ (1|Date) + (1|Site), # random effects
family = poisson (link = "log"),
data = dframe1)
# inspect and test the model
summary(model1P)
# the best test of a GLMM is a Likelihood Ratio Test, which compares the fit of the model to if each term was removed one at a time using Chi-squared tests
# to run an LRT, use the drop1 function (i.e. drop 1 term at a time), specifying Chi-squared
drop1(model1P, test="Chisq")
# check the model's residuals
# this custom function produces a selection of plots that you can scroll through to check that residuals look ok
# you want residuals that are roughly normally distributed around zero with no obvious trends
chkres(model1P)  # these residuals do appear to have a slight negative trend so they are not ideal
# QuasiPoisson model using MASS
model1Q <- glmmPQL(PollenLoad ~ Treatment,
random = list(~1|Date, ~1|Site),
family = quasipoisson (link = "log"),
data = dframe1)
summary(model1Q)
Anova(model1Q, type="III")  # drop1 doesn't work properly with this model class so we use a Type III Anova instead
# check residuals
# this function produces a subset of the previous plots that are available for this model class
chkres.PQL(model1Q) # these look slightly better but still not great
for (model in c(model1P,model1Q,model1NB)){
r.squaredGLMM(model)
}
r.squaredGLMM(model1NB)
r.squaredGLMM(model1Q)
r.squaredGLMM(model1P)
.libPaths(c("C:\\rlib", .libPaths()))
setwd("C:\\Users\\461776\\Dropbox\\PhD Hull\\Work\\Data and analysis\\Chapter 2\\Pollen")
### Pollen abundance / richness ###
dframe1 <- read.csv("PollenTransectIndivMoths.csv", head = TRUE, row.names = 1)
# dframe1 <- read.csv(file.choose())
dframe1$PollenYN <- ifelse(dframe1$PollenTypes==0,0,1)
View(dframe1)
summary(dframe1$PollenYN)
####################################################
####   Script for preparing data for analysis   ####
####################################################
### Clear the workspace
rm(list=ls())
### install if necessary and then load the libraries you need
j <- c("reshape2")
new.packages <- j[!(j %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
library(reshape2)
### read in the data - this is the raw data as input by Paula.
# I have manually added a column called 'sampleID' with a unique number for each row of the dataframe;
# I have renamed "Family/Species" to "Family_Species",
# and added _1 to the first PollenType and PollenNumber column for consistency
dframe1<-read.csv("Data/BanzaDataNoct.csv", header=TRUE)
summary(dframe1) # Check it's imported correctly
### Remove redundant PollenTypes 14 & 15
dframe1 <- dframe1[,1:32]
summary(dframe1)
### Melt the dataframe
names(dframe1) # check what columns you have and what they're called
# create a dframe with all the family/species names for each sample
melt1 <- melt(dframe1[,c("SampleID","Family_Species","Date","Site","SlideNumber","PollenCount",
"PollenType_1","PollenType_2","PollenType_3","PollenType_4",
"PollenType_5","PollenType_6","PollenType_7","PollenType_8",
"PollenType_9","PollenType_10","PollenType_11","PollenType_12","PollenType_13")],
id=c("SampleID","Family_Species","Date","Site","SlideNumber","PollenCount"))
#label each row of the new dframe and remove the old column headings
melt1$level.order <- seq(1, length(melt1$SampleID),1)
melt1 <- melt1[,c(1:6,8:9)]
# create a dframe with all the pollen counts for each sample
melt2 <- melt(dframe1[,c("SampleID","Family_Species","Date","Site","SlideNumber","PollenCount",
"PollenNumber_1","PollenNumber_2","PollenNumber_3","PollenNumber_4",
"PollenNumber_5","PollenNumber_6","PollenNumber_7","PollenNumber_8",
"PollenNumber_9","PollenNumber_10","PollenNumber_11","PollenNumber_12","PollenNumber_13")],
id=c("SampleID","Family_Species","Date","Site","SlideNumber","PollenCount"))
# label each row of the new dframe and remove the old column headings
melt2$level.order <- seq(1, length(melt2$SampleID),1)
melt2 <- melt2[,c(1:6,8:9)]  #trim out the ID column - this is important for merging back together
# rename the 'value' column on the second dframe so it merges correctly
colnames(melt2) <- c("SampleID","Family_Species","Date","Site","SlideNumber","PollenCount", "value2","level.order")
# merge the dframes back together
dframe1.melt <- merge(melt1, melt2)
# remove the row labels as we are finished with them
dframe1.melt <- dframe1.melt[,c(1:6,8:9)]
# remove all the rows with NAs
dframe1.melt <- dframe1.melt[complete.cases(dframe1.melt[,7:8]),]
# rename the remaining columns to original names
colnames(dframe1.melt) <- c("SampleID","Family_Species","Date","Site","SlideNumber","PollenCount", "PollenType","PollenNumber")
str(dframe1.melt)
# reformat the data into a matrix
matrix1 <- dcast(dframe1.melt, SampleID + Family_Species + Date +
Site + SlideNumber + PollenCount ~ PollenType,
value.var = "PollenNumber",
fun.aggregate = sum)
# this has added an extra column (I don't know why!) but let's delete it
matrix1 <- matrix1[,c(1:6,8:80)]
# output the reformatted dataframe to a .txt file to use in downstream analysis
write.table(matrix1, "Data\\MatrixNoct.txt", sep="\t", row.names=FALSE)
# N.B. at this point any typing errors in species names will become obvious as they will be assigned an additional column.
# Therefore at this point, go back to the raw data, find these typing errors, correct them, and run this script again.
names(matrix1)
matrix2 <- aggregate(matrix1, by=list(Date,Site),
FUN = sum, na.rm=TRUE)
matrix1 <- matrix1[,c(1:6,8:80)]
####################################################
####   Script for preparing data for analysis   ####
####################################################
### Clear the workspace
rm(list=ls())
### install if necessary and then load the libraries you need
j <- c("reshape2")
new.packages <- j[!(j %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(j, require, character.only = TRUE)  # loads up any libraries that aren't already loaded
### read in the data - this is the raw data as input by Paula.
# I have manually added a column called 'sampleID' with a unique number for each row of the dataframe;
# I have renamed "Family/Species" to "Family_Species",
# and added _1 to the first PollenType and PollenNumber column for consistency
dframe1<-read.csv("Data/BanzaDataNoct.csv", header=TRUE)
summary(dframe1) # Check it's imported correctly
### Remove redundant PollenTypes 14 & 15
dframe1 <- dframe1[,1:32]
summary(dframe1)
### Melt the dataframe
names(dframe1) # check what columns you have and what they're called
# create a dframe with all the family/species names for each sample
melt1 <- melt(dframe1[,c("SampleID","Family_Species","Date","Site","SlideNumber","PollenCount",
"PollenType_1","PollenType_2","PollenType_3","PollenType_4",
"PollenType_5","PollenType_6","PollenType_7","PollenType_8",
"PollenType_9","PollenType_10","PollenType_11","PollenType_12","PollenType_13")],
id=c("SampleID","Family_Species","Date","Site","SlideNumber","PollenCount"))
#label each row of the new dframe and remove the old column headings
melt1$level.order <- seq(1, length(melt1$SampleID),1)
melt1 <- melt1[,c(1:6,8:9)]
# create a dframe with all the pollen counts for each sample
melt2 <- melt(dframe1[,c("SampleID","Family_Species","Date","Site","SlideNumber","PollenCount",
"PollenNumber_1","PollenNumber_2","PollenNumber_3","PollenNumber_4",
"PollenNumber_5","PollenNumber_6","PollenNumber_7","PollenNumber_8",
"PollenNumber_9","PollenNumber_10","PollenNumber_11","PollenNumber_12","PollenNumber_13")],
id=c("SampleID","Family_Species","Date","Site","SlideNumber","PollenCount"))
# label each row of the new dframe and remove the old column headings
melt2$level.order <- seq(1, length(melt2$SampleID),1)
melt2 <- melt2[,c(1:6,8:9)]  #trim out the ID column - this is important for merging back together
# rename the 'value' column on the second dframe so it merges correctly
colnames(melt2) <- c("SampleID","Family_Species","Date","Site","SlideNumber","PollenCount", "value2","level.order")
# merge the dframes back together
dframe1.melt <- merge(melt1, melt2)
# remove the row labels as we are finished with them
dframe1.melt <- dframe1.melt[,c(1:6,8:9)]
# remove all the rows with NAs
dframe1.melt <- dframe1.melt[complete.cases(dframe1.melt[,7:8]),]
# rename the remaining columns to original names
colnames(dframe1.melt) <- c("SampleID","Family_Species","Date","Site","SlideNumber","PollenCount", "PollenType","PollenNumber")
str(dframe1.melt)
# reformat the data into a matrix
matrix1 <- dcast(dframe1.melt, SampleID + Family_Species + Date +
Site + SlideNumber + PollenCount ~ PollenType,
value.var = "PollenNumber",
fun.aggregate = sum)
summary(matrix1)
matrix1 <- matrix1[,c(1:6,8:80)]
# output the reformatted dataframe to a .txt file to use in downstream analysis
write.table(matrix1, "Data\\MatrixNoct.txt", sep="\t", row.names=FALSE)
# N.B. at this point any typing errors in species names will become obvious as they will be assigned an additional column.
# Therefore at this point, go back to the raw data, find these typing errors, correct them, and run this script again.
# now we want to produce a separate file with the data organised by each sampling session at each site
# we will do this by aggregating samples from the same site and sampling session
matrix2 <- aggregate(matrix1, by=list(Date,Site),
FUN = sum, na.rm=TRUE)
names(matrix1)
matrix2 <- aggregate(matrix1, by=list(matrix1$Date,matrix1$Site),
FUN = sum, na.rm=TRUE)
names(matrix1)
####################################################
####   Script for preparing data for analysis   ####
####################################################
### Clear the workspace
rm(list=ls())
### install if necessary and then load the libraries you need
j <- c("reshape2")
new.packages <- j[!(j %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(j, require, character.only = TRUE)  # loads up any libraries that aren't already loaded
### read in the data - this is the raw data as input by Paula.
# I have manually added a column called 'sampleID' with a unique number for each row of the dataframe;
# I have renamed "Family/Species" to "Family_Species",
# and added _1 to the first PollenType and PollenNumber column for consistency
dframe1<-read.csv("Data/BanzaDataNoct.csv", header=TRUE)
summary(dframe1) # Check it's imported correctly
### Remove redundant PollenTypes 14 & 15
dframe1 <- dframe1[,1:32]
summary(dframe1)
### Melt the dataframe
names(dframe1) # check what columns you have and what they're called
# create a dframe with all the family/species names for each sample
melt1 <- melt(dframe1[,c("SampleID","Family_Species","Date","Site","SlideNumber","PollenCount",
"PollenType_1","PollenType_2","PollenType_3","PollenType_4",
"PollenType_5","PollenType_6","PollenType_7","PollenType_8",
"PollenType_9","PollenType_10","PollenType_11","PollenType_12","PollenType_13")],
id=c("SampleID","Family_Species","Date","Site","SlideNumber","PollenCount"))
#label each row of the new dframe and remove the old column headings
melt1$level.order <- seq(1, length(melt1$SampleID),1)
melt1 <- melt1[,c(1:6,8:9)]
# create a dframe with all the pollen counts for each sample
melt2 <- melt(dframe1[,c("SampleID","Family_Species","Date","Site","SlideNumber","PollenCount",
"PollenNumber_1","PollenNumber_2","PollenNumber_3","PollenNumber_4",
"PollenNumber_5","PollenNumber_6","PollenNumber_7","PollenNumber_8",
"PollenNumber_9","PollenNumber_10","PollenNumber_11","PollenNumber_12","PollenNumber_13")],
id=c("SampleID","Family_Species","Date","Site","SlideNumber","PollenCount"))
# label each row of the new dframe and remove the old column headings
melt2$level.order <- seq(1, length(melt2$SampleID),1)
melt2 <- melt2[,c(1:6,8:9)]  #trim out the ID column - this is important for merging back together
# rename the 'value' column on the second dframe so it merges correctly
colnames(melt2) <- c("SampleID","Family_Species","Date","Site","SlideNumber","PollenCount", "value2","level.order")
# merge the dframes back together
dframe1.melt <- merge(melt1, melt2)
# remove the row labels as we are finished with them
dframe1.melt <- dframe1.melt[,c(1:6,8:9)]
# remove all the rows with NAs
dframe1.melt <- dframe1.melt[complete.cases(dframe1.melt[,7:8]),]
# rename the remaining columns to original names
colnames(dframe1.melt) <- c("SampleID","Family_Species","Date","Site","SlideNumber","PollenCount", "PollenType","PollenNumber")
str(dframe1.melt)
matrix1 <- dcast(dframe1.melt, SampleID + Family_Species + Date +
Site + SlideNumber + PollenCount ~ PollenType,
value.var = "PollenNumber",
fun.aggregate = sum)
View(matrix1)
# this has added an extra column (I don't know why!) but let's delete it
matrix1 <- matrix1[,c(1:6,8:80)]
View(matrix1)
matrix2 <- matrix1[,c(3:4,7:79)]
View(matrix2)
matrix2 <- aggregate(matrix2, by=list(Date,Site),
FUN = sum, na.rm=TRUE)
matrix2 <- aggregate(matrix2, by=list(matrix2$Date,matrix2$Site),
FUN = sum, na.rm=TRUE)
matrix2$Date <- factor(matrix2$Date)
matrix2$Site <- factor(matrix2$Site)
matrix2 <- aggregate(matrix2, by=list(matrix2$Date,matrix2$Site),
FUN = sum, na.rm=TRUE)
summary(matrix2)
matrix1r <- matrix1[,c(3:4,7:79)]
####################################################
####   Script for preparing data for analysis   ####
####################################################
### Clear the workspace
rm(list=ls())
### install if necessary and then load the libraries you need
j <- c("reshape2")
new.packages <- j[!(j %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(j, require, character.only = TRUE)  # loads up any libraries that aren't already loaded
### read in the data - this is the raw data as input by Paula.
# I have manually added a column called 'sampleID' with a unique number for each row of the dataframe;
# I have renamed "Family/Species" to "Family_Species",
# and added _1 to the first PollenType and PollenNumber column for consistency
dframe1<-read.csv("Data/BanzaDataNoct.csv", header=TRUE)
summary(dframe1) # Check it's imported correctly
### Remove redundant PollenTypes 14 & 15
dframe1 <- dframe1[,1:32]
summary(dframe1)
### Melt the dataframe
names(dframe1) # check what columns you have and what they're called
# create a dframe with all the family/species names for each sample
melt1 <- melt(dframe1[,c("SampleID","Family_Species","Date","Site","SlideNumber","PollenCount",
"PollenType_1","PollenType_2","PollenType_3","PollenType_4",
"PollenType_5","PollenType_6","PollenType_7","PollenType_8",
"PollenType_9","PollenType_10","PollenType_11","PollenType_12","PollenType_13")],
id=c("SampleID","Family_Species","Date","Site","SlideNumber","PollenCount"))
#label each row of the new dframe and remove the old column headings
melt1$level.order <- seq(1, length(melt1$SampleID),1)
melt1 <- melt1[,c(1:6,8:9)]
# create a dframe with all the pollen counts for each sample
melt2 <- melt(dframe1[,c("SampleID","Family_Species","Date","Site","SlideNumber","PollenCount",
"PollenNumber_1","PollenNumber_2","PollenNumber_3","PollenNumber_4",
"PollenNumber_5","PollenNumber_6","PollenNumber_7","PollenNumber_8",
"PollenNumber_9","PollenNumber_10","PollenNumber_11","PollenNumber_12","PollenNumber_13")],
id=c("SampleID","Family_Species","Date","Site","SlideNumber","PollenCount"))
# label each row of the new dframe and remove the old column headings
melt2$level.order <- seq(1, length(melt2$SampleID),1)
melt2 <- melt2[,c(1:6,8:9)]  #trim out the ID column - this is important for merging back together
# rename the 'value' column on the second dframe so it merges correctly
colnames(melt2) <- c("SampleID","Family_Species","Date","Site","SlideNumber","PollenCount", "value2","level.order")
# merge the dframes back together
dframe1.melt <- merge(melt1, melt2)
# remove the row labels as we are finished with them
dframe1.melt <- dframe1.melt[,c(1:6,8:9)]
# remove all the rows with NAs
dframe1.melt <- dframe1.melt[complete.cases(dframe1.melt[,7:8]),]
# rename the remaining columns to original names
colnames(dframe1.melt) <- c("SampleID","Family_Species","Date","Site","SlideNumber","PollenCount", "PollenType","PollenNumber")
str(dframe1.melt)
# reformat the data into a matrix
matrix1 <- dcast(dframe1.melt, SampleID + Family_Species + Date +
Site + SlideNumber + PollenCount ~ PollenType,
value.var = "PollenNumber",
fun.aggregate = sum)
# this has added an extra column (I don't know why!) but let's delete it
matrix1 <- matrix1[,c(1:6,8:80)]
# output the reformatted dataframe to a .txt file to use in downstream analysis
write.table(matrix1, "Data\\MatrixNoct.txt", sep="\t", row.names=FALSE)
# N.B. at this point any typing errors in species names will become obvious as they will be assigned an additional column.
# Therefore at this point, go back to the raw data, find these typing errors, correct them, and run this script again.
# now we want to produce a separate file with the data organised by each sampling session at each site
# we will do this by aggregating samples from the same site and sampling session
matrix1r <- matrix1[,c(3:4,7:79)]
summary(matrix1r)
matrix2 <- aggregate(matrix1r, by=list(matrix2$Date,matrix2$Site),
FUN = sum, na.rm=TRUE)
matrix2 <- aggregate(matrix1r, by=list(matrix1r$Date,matrix1r$Site),
FUN = sum, na.rm=TRUE)
matrix2 <- aggregate(matrix1r, by=list(matrix1r$Date,matrix1r$Site),
FUN = sum)
matrix2 <- aggregate(matrix1r, by=list(matrix1r$Date),
FUN = sum, na.rm=TRUE)
matrix2 <- aggregate(matrix1r, by=list(matrix1r$Date,matrix1r$Site),
FUN = sum, na.rm=TRUE)
summary(matrix1r)
matrix2 <- aggregate(x = matrix1r, by=list(matrix1r$Date,matrix1r$Site),
FUN = sum, na.rm=TRUE)
FUN = mean, na.rm=TRUE)
matrix2 <- aggregate(matrix1r, by=list(matrix1r$Date,matrix1r$Site),
FUN = mean, na.rm=TRUE)
View(matrix2)
View(matrix1r)
matrix2t <- ddply(matrix1, .(Site,Date), numcolwise(sum))
library(plyr)
matrix2t <- ddply(matrix1, .(Site,Date), numcolwise(sum))
View(matrix2t)
matrix2 <- ddply(matrix1r, .(Site,Date), numcolwise(sum))
View(matrix2)
write.table(matrix2, "Data\\SamplesNoct.txt", sep="\t", row.names=FALSE)
rm(list=ls())
### install if necessary and then load the libraries you need
j <- c("lme4","car","ggplot2","RVAideMemoire","arm","MASS","MuMIn")
new.packages <- j[!(j %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(j, require, character.only = TRUE)  # loads up any libraries that aren't already loaded
# for some reason the package glmmADMB won't install via the usual methods, so:
install.packages("R2admb")
install.packages("glmmADMB",
repos=c("http://glmmadmb.r-forge.r-project.org/repos",
getOption("repos")),
type="source")
library(glmmADMB)
### load up Callum's custom set of functions
source("CheckResidsFunction.R")
### read in the data - this is the .txt file you produced in the PreparingData.R script.
dframe1<-read.table("Data/SamplesNoct.txt", header=TRUE)
View(dframe1)
summary(dframe1) # Check it's imported correctly
dframe1$PollenLoad <- rowSums(dframe1[c(3:75)])
dframe1$PollenTypes <- rowSums(dframe1[c(3:75)] != 0)
dframe1$PollenYN <- ifelse(dframe1$PollenTypes==0,0,1)
rm(list=ls())
### install if necessary and then load the libraries you need
j <- c("lme4","car","ggplot2","RVAideMemoire","arm","MASS","MuMIn")
new.packages <- j[!(j %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(j, require, character.only = TRUE)  # loads up any libraries that aren't already loaded
# for some reason the package glmmADMB won't install via the usual methods, so:
install.packages("R2admb")
install.packages("glmmADMB",
repos=c("http://glmmadmb.r-forge.r-project.org/repos",
getOption("repos")),
type="source")
library(glmmADMB)
### load up Callum's custom set of functions
source("CheckResidsFunction.R")
### read in the data - this is the .txt file you produced in the PreparingData.R script.
dframe1<-read.table("Data/SamplesNoct.txt", header=TRUE)
summary(dframe1) # Check it's imported correctly
### total up the pollen grains for each sample
dframe1$PollenLoad <- rowSums(dframe1[c(3:75)])
### total up the number of pollen species for each sample (i.e. how many columns do not contain 0)
dframe1$PollenTypes <- rowSums(dframe1[c(3:75)] != 0)
install.packages("R2admb")
install.packages("glmmADMB", repos = c("http://glmmadmb.r-forge.r-project.org/repos",
)
)
library(glmmADMB)
### load up Callum's custom set of functions
source("CheckResidsFunction.R")
### read in the data - this is the .txt file you produced in the PreparingData.R script.
dframe1<-read.table("Data/SamplesNoct.txt", header=TRUE)
summary(dframe1) # Check it's imported correctly
### total up the pollen grains for each sample
dframe1$PollenLoad <- rowSums(dframe1[c(3:75)])
### total up the number of pollen species for each sample (i.e. how many columns do not contain 0)
dframe1$PollenTypes <- rowSums(dframe1[c(3:75)] != 0)
j <- c("lme4","car","ggplot2","RVAideMemoire","arm","MASS","MuMIn","glmmADMB")
new.packages <- j[!(j %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(j, require, character.only = TRUE)  # loads up any libraries that aren't already loaded
dframe1$Treatment <- ifelse(grepl("NF",dframe1$Site),"NoFire","Fire")
dframe1$Treatment <- factor(dframe1$Treatment)
View(dframe1)
plot(PollenLoad ~ Treatment, data = dframe1)
hist(dframe1$PollenLoad)
### Data clearly have lots of skew, so it's worth checking for overdispersion
### Simplest test is to compare the mean and variance.
### In a regular Poisson distribution, mean ~= variance; if variance is much larger, data are overdispersed
mean(dframe1$PollenLoad)
var(dframe1$PollenLoad)
### Data appear overdispersed, so we will try two types of model in addition to Poisson: quasi-Poisson, and negative binomial
### However no zeroes in data, so zero-inflated models would be inappropriate
# construct models using Date and Site as random effects
# random effects are factors that might affect the output variable, but not in a way that is interesting to us
# you might see variation between different sampling days, or between different fire or non-fire sites...
# ...but we are only really interested in variation due to Treatment
# Poisson model using lme4
model1P <- glmer(PollenLoad ~ Treatment # fixed effects
+ (1|Date) + (1|Site), # random effects
family = poisson (link = "log"),
data = dframe1)
# inspect and test the model
summary(model1P)
# the best test of a GLMM is a Likelihood Ratio Test, which compares the fit of the model to if each term was removed one at a time using Chi-squared tests
# to run an LRT, use the drop1 function (i.e. drop 1 term at a time), specifying Chi-squared
drop1(model1P, test="Chisq")
# check the model's residuals
# this custom function produces a selection of plots that you can scroll through to check that residuals look ok
# you want residuals that are roughly normally distributed around zero with no obvious trends
chkres(model1P)  # these residuals do appear to have a slight negative trend so they are not ideal
model1Q <- glmmPQL(PollenLoad ~ Treatment,
random = list(~1|Date, ~1|Site),
family = quasipoisson (link = "log"),
data = dframe1)
summary(model1Q)
Anova(model1Q, type="III")  # drop1 doesn't work properly with this model class so we use a Type III Anova instead
# check residuals
# this function produces a subset of the previous plots that are available for this model class
chkres.PQL(model1Q) # these look slightly better but still not great
model1NB <- glmer.nb(PollenLoad ~ Treatment # fixed effects
+ (1|Date) + (1|Site), # random effects
data = dframe1)
summary(model1NB)
drop1(model1NB, test= "Chisq") # glmer.nb produces the same model class as glmer so we can treat it the same
chkres(model1NB) # these are still not ideal but they're the best yet
plot(PollenTypes ~ Treatment, data = dframe1)
hist(dframe1$PollenTypes)
### Again data clearly have lots of skew, though not so bad, so it's worth checking for overdispersion
### Simplest test is to compare the mean and variance.
### In a regular Poisson distribution, mean ~= variance; if variance is much larger, data are overdispersed
mean(dframe1$PollenTypes)
var(dframe1$PollenTypes)
### Data appear possibly overdispersed, so we will try two types of model in addition to Poisson: quasi-Poisson, and negative binomial
### However no zeroes in data, so zero-inflated models would be inappropriate
# construct models using Date and Site as random effects
# Poisson model using lme4
model2P <- glmer(PollenTypes ~ Treatment # fixed effects
+ (1|Date) + (1|Site), # random effects
family = poisson (link = "log"),
data = dframe1)
# inspect and test the model
summary(model2P)
# the best test of a GLMM is a Likelihood Ratio Test, which compares the fit of the model to if each term was removed one at a time using Chi-squared tests
# to run an LRT, use the drop1 function (i.e. drop 1 term at a time), specifying Chi-squared
drop1(model2P, test="Chisq")
# check the model's residuals
chkres(model2P)  # these residuals do appear to have a very slight negative trend but probably nothing to worry about too much
model2Q <- glmmPQL(PollenTypes ~ Treatment,
random = list(~1|Date, ~1|Site),
family = quasipoisson (link = "log"),
data = dframe1)
summary(model2Q)
Anova(model2Q, type="III")  # drop1 doesn't work properly with this model class so we use a Type III Anova instead
chkres.PQL(model2Q) # these look better in some ways, worse in others
model2NB <- glmer.nb(PollenTypes ~ Treatment # fixed effects
+ (1|Date) + (1|Site), # random effects
data = dframe1)
summary(model2NB)
drop1(model2NB, test= "Chisq") # glmer.nb produces the same model class as glmer so we can treat it the same
chkres(model2NB) # these are very similar to the Poisson residuals
j <- c("lme4","car","ggplot2","RVAideMemoire","arm","MASS","MuMIn","bbmle")
new.packages <- j[!(j %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(j, require, character.only = TRUE)  # loads up any libraries that aren't already loaded
